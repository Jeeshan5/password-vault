{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mojee/Desktop/Projects/password-vault/frontend/lib/dbConnect.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI!;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n}\r\n\r\ninterface MongooseCache {\r\n  conn: typeof mongoose | null;\r\n  promise: Promise<typeof mongoose> | null;\r\n}\r\n\r\n/**\r\n * Global is used here to maintain a cached connection across hot reloads\r\n * in development. This prevents connections growing exponentially\r\n * during API Route usage.\r\n */\r\ndeclare global {\r\n  // eslint-disable-next-line no-var\r\n  var mongoose: MongooseCache | undefined;\r\n}\r\n\r\nlet cached = global.mongoose;\r\n\r\nif (!cached) {\r\n  cached = global.mongoose = { conn: null, promise: null };\r\n}\r\n\r\nasync function dbConnect() {\r\n  if (!cached) {\r\n    cached = global.mongoose = { conn: null, promise: null };\r\n  }\r\n\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    const opts = {\r\n      bufferCommands: false,\r\n    };\r\n\r\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\r\n      console.log('âœ… Connected to MongoDB Atlas');\r\n      return mongoose;\r\n    });\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise;\r\n  } catch (e) {\r\n    cached.promise = null;\r\n    throw e;\r\n  }\r\n\r\n  return cached.conn;\r\n}\r\n\r\nexport default dbConnect;"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAiBA,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,CAAC,QAAQ;QACX,SAAS,OAAO,QAAQ,GAAG;YAAE,MAAM;YAAM,SAAS;QAAK;IACzD;IAEA,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,oHAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;YACzD,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mojee/Desktop/Projects/password-vault/frontend/models/User.ts"],"sourcesContent":["import mongoose, { Document, Schema } from 'mongoose';\r\n\r\nexport interface IUser extends Document {\r\n  email: string;\r\n  password: string;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst UserSchema = new Schema<IUser>(\r\n  {\r\n    email: {\r\n      type: String,\r\n      required: [true, 'Email is required'],\r\n      unique: true,\r\n      lowercase: true,\r\n      trim: true,\r\n      match: [\r\n        /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n        'Please enter a valid email address',\r\n      ],\r\n    },\r\n    password: {\r\n      type: String,\r\n      required: [true, 'Password is required'],\r\n      minlength: [8, 'Password must be at least 8 characters long'],\r\n    },\r\n  },\r\n  {\r\n    timestamps: true,\r\n  }\r\n);\r\n\r\n// Index for faster email lookups\r\nUserSchema.index({ email: 1 });\r\n\r\nexport default mongoose.models.User || mongoose.model<IUser>('User', UserSchema);"],"names":[],"mappings":";;;;AAAA;;AASA,MAAM,aAAa,IAAI,mHAAM,CAC3B;IACE,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAoB;QACrC,QAAQ;QACR,WAAW;QACX,MAAM;QACN,OAAO;YACL;YACA;SACD;IACH;IACA,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;QACxC,WAAW;YAAC;YAAG;SAA8C;IAC/D;AACF,GACA;IACE,YAAY;AACd;AAGF,iCAAiC;AACjC,WAAW,KAAK,CAAC;IAAE,OAAO;AAAE;uCAEb,oHAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,oHAAQ,CAAC,KAAK,CAAQ,QAAQ","debugId":null}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mojee/Desktop/Projects/password-vault/frontend/lib/jwt.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport { IUser } from '@/models/User';\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET;\r\n\r\nif (!JWT_SECRET) {\r\n  throw new Error('JWT_SECRET environment variable is required');\r\n}\r\n\r\nexport interface JWTPayload {\r\n  userId: string;\r\n  email: string;\r\n}\r\n\r\nexport function generateToken(user: IUser): string {\r\n  const payload: JWTPayload = {\r\n    userId: (user._id as string).toString(),\r\n    email: user.email,\r\n  };\r\n\r\n  return jwt.sign(payload, JWT_SECRET as string, {\r\n    expiresIn: '7d', // Token expires in 7 days\r\n  });\r\n}\r\n\r\nexport function verifyToken(token: string): JWTPayload {\r\n  try {\r\n    return jwt.verify(token, JWT_SECRET as string) as JWTPayload;\r\n  } catch (error) {\r\n    throw new Error('Invalid or expired token');\r\n  }\r\n}\r\n\r\nexport function extractUserIdFromToken(authHeader: string | null): string | null {\r\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n    return null;\r\n  }\r\n\r\n  const token = authHeader.substring(7);\r\n  \r\n  try {\r\n    const payload = verifyToken(token);\r\n    return payload.userId;\r\n  } catch {\r\n    return null;\r\n  }\r\n}"],"names":[],"mappings":";;;;;;;;AAAA;;AAGA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;AAEzC,IAAI,CAAC,YAAY;IACf,MAAM,IAAI,MAAM;AAClB;AAOO,SAAS,cAAc,IAAW;IACvC,MAAM,UAAsB;QAC1B,QAAQ,AAAC,KAAK,GAAG,CAAY,QAAQ;QACrC,OAAO,KAAK,KAAK;IACnB;IAEA,OAAO,kJAAG,CAAC,IAAI,CAAC,SAAS,YAAsB;QAC7C,WAAW;IACb;AACF;AAEO,SAAS,YAAY,KAAa;IACvC,IAAI;QACF,OAAO,kJAAG,CAAC,MAAM,CAAC,OAAO;IAC3B,EAAE,OAAO,OAAO;QACd,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,SAAS,uBAAuB,UAAyB;IAC9D,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CAAC,YAAY;QACpD,OAAO;IACT;IAEA,MAAM,QAAQ,WAAW,SAAS,CAAC;IAEnC,IAAI;QACF,MAAM,UAAU,YAAY;QAC5B,OAAO,QAAQ,MAAM;IACvB,EAAE,OAAM;QACN,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 224, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mojee/Desktop/Projects/password-vault/frontend/app/api/auth/signup/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport bcrypt from 'bcryptjs';\r\nimport dbConnect from '@/lib/dbConnect';\r\nimport User from '@/models/User';\r\nimport { generateToken } from '@/lib/jwt';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    await dbConnect();\r\n\r\n    const { email, password } = await request.json();\r\n\r\n    if (!email || !password) {\r\n      return NextResponse.json(\r\n        { error: 'Email and password are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (password.length < 8) {\r\n      return NextResponse.json(\r\n        { error: 'Password must be at least 8 characters long' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Check if user already exists\r\n    const existingUser = await User.findOne({ email: email.toLowerCase() });\r\n    if (existingUser) {\r\n      return NextResponse.json(\r\n        { error: 'User already exists with this email' },\r\n        { status: 409 }\r\n      );\r\n    }\r\n\r\n    // Hash password\r\n    const saltRounds = 12;\r\n    const hashedPassword = await bcrypt.hash(password, saltRounds);\r\n\r\n    // Create new user\r\n    const newUser = await User.create({\r\n      email: email.toLowerCase(),\r\n      password: hashedPassword,\r\n    });\r\n\r\n    // Generate JWT token\r\n    const token = generateToken(newUser);\r\n\r\n    return NextResponse.json({\r\n      token,\r\n      user: {\r\n        id: newUser._id.toString(),\r\n        email: newUser.email,\r\n        createdAt: newUser.createdAt.toISOString(),\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Signup error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,IAAA,6HAAS;QAEf,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE9C,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkC,GAC3C;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,SAAS,MAAM,GAAG,GAAG;YACvB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA8C,GACvD;gBAAE,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,MAAM,eAAe,MAAM,2HAAI,CAAC,OAAO,CAAC;YAAE,OAAO,MAAM,WAAW;QAAG;QACrE,IAAI,cAAc;YAChB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsC,GAC/C;gBAAE,QAAQ;YAAI;QAElB;QAEA,gBAAgB;QAChB,MAAM,aAAa;QACnB,MAAM,iBAAiB,MAAM,8IAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,kBAAkB;QAClB,MAAM,UAAU,MAAM,2HAAI,CAAC,MAAM,CAAC;YAChC,OAAO,MAAM,WAAW;YACxB,UAAU;QACZ;QAEA,qBAAqB;QACrB,MAAM,QAAQ,IAAA,6HAAa,EAAC;QAE5B,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB;YACA,MAAM;gBACJ,IAAI,QAAQ,GAAG,CAAC,QAAQ;gBACxB,OAAO,QAAQ,KAAK;gBACpB,WAAW,QAAQ,SAAS,CAAC,WAAW;YAC1C;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}